// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(*) FROM users WHERE is_active = true
`

func (q *Queries) CountActiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username,
        email,
        password_hash,
        first_name,
        last_name
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id,
    username,
    email,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
}

type CreateUserRow struct {
	ID         int32              `json:"id"`
	Username   string             `json:"username"`
	Email      string             `json:"email"`
	FirstName  pgtype.Text        `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	IsActive   pgtype.Bool        `json:"is_active"`
	IsVerified pgtype.Bool        `json:"is_verified"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users SET is_active = false, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    username,
    email,
    password_hash,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
FROM users
WHERE
    email = $1
    AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    username,
    email,
    password_hash,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
FROM users
WHERE
    id = $1
    AND is_active = true
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id,
    username,
    email,
    password_hash,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
FROM users
WHERE
    username = $1
    AND is_active = true
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT
    id,
    username,
    email,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
FROM users
WHERE
    is_active = true
ORDER BY created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListActiveUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListActiveUsersRow struct {
	ID         int32              `json:"id"`
	Username   string             `json:"username"`
	Email      string             `json:"email"`
	FirstName  pgtype.Text        `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	IsActive   pgtype.Bool        `json:"is_active"`
	IsVerified pgtype.Bool        `json:"is_verified"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListActiveUsers(ctx context.Context, arg ListActiveUsersParams) ([]ListActiveUsersRow, error) {
	rows, err := q.db.Query(ctx, listActiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListActiveUsersRow{}
	for rows.Next() {
		var i ListActiveUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $2,
    email = $3,
    first_name = $4,
    last_name = $5,
    updated_at = NOW()
WHERE
    id = $1
    AND is_active = true
RETURNING
    id,
    username,
    email,
    first_name,
    last_name,
    is_active,
    is_verified,
    created_at,
    updated_at
`

type UpdateUserParams struct {
	ID        int32       `json:"id"`
	Username  string      `json:"username"`
	Email     string      `json:"email"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
}

type UpdateUserRow struct {
	ID         int32              `json:"id"`
	Username   string             `json:"username"`
	Email      string             `json:"email"`
	FirstName  pgtype.Text        `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	IsActive   pgtype.Bool        `json:"is_active"`
	IsVerified pgtype.Bool        `json:"is_verified"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password_hash = $2,
    updated_at = NOW()
WHERE
    id = $1
    AND is_active = true
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET
    is_verified = true,
    updated_at = NOW()
WHERE
    id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, verifyUser, id)
	return err
}
